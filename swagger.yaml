openapi: 3.0.0
info:
  title: Jobs-Manager-Api
  description: This is a Jobs API Manager built with Node.js and Express. This API provides registration and login functionality for users. Additionally, it allows users to create, update, and delete job listings.  It shows how to validate Mongoose schemas and implement authentication using JSON Web Tokens (JWT). Furthermore, it can validate mongoose errors as duplicate emails and cast errors.  Security measures such as password hashing and salting are also implemented to ensure the safety of user data. Additionally, xss protection is implemented to prevent cross-site scripting attacks; helmet middleware is used to set various HTTP headers for enhanced security; rate limiter is implemented to prevent brute force attacks; and input validation is done to protect against malicious user inputs. These measures collectively strengthen the overall security of the application and safeguard user information from potential threats, and finally, CORS is implemented to restrict access to resources from different origins, reducing the risk of unauthorized access and data breaches. Moreover, the application utilizes encryption algorithms such as SSL/TLS to secure data transmission over networks, providing an extra layer of protection against eavesdropping and tampering. These security measures work together to create a robust defense system that ensures the confidentiality, integrity, and availability of user data.
  contact:
    name: Jeysson Aly Contreras
    url: https://github.com/alyconr
    email: alyconr@hotmail.com
  version: '1.0'
servers:
  - url: https://jobs-manager-api-892z.onrender.com/api/v1
    variables: {}
paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register User
      operationId: RegisterUser
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/RegisterUserRequest'
                - example:
                    name: Aly
                    email: alyconr@gmail.com
                    password: Misceron123@
            example:
              name: Aly
              email: alyconr@gmail.com
              password: Misceron123@
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security: []
  /auth/login:
    post:
      tags:
        - Auth
      summary: login
      operationId: login
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/loginrequest'
                - example:
                    email: alyconr@gmail.com
                    password: Misceron123@
            example:
              email: alyconr@gmail.com
              password: Misceron123@
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security: []
  /jobs:
    post:
      tags:
        - Jobs
      summary: Create Job
      operationId: CreateJob
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/CreateJobRequest'
                - example:
                    company: Redhat
                    position: Redhat Engineer
            example:
              company: Redhat
              position: Redhat Engineer
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
    get:
      tags:
        - Jobs
      summary: Get all Jobs
      operationId: GetallJobs
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
  /jobs/{id}:
    parameters: 
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: The Job ID
    get:
      tags:
        - Jobs
      summary: Get Single Job
      operationId: GetSingleJob
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
    patch:
      tags:
        - Jobs
      summary: Update Job
      operationId: UpdateJob
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/UpdateJobRequest'
                - example:
                    company: DEEZER
                    position: bACKEND RELOADED
            example:
              company: DEEZER
              position: bACKEND RELOADED
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
    delete:
      tags:
        - Jobs
      summary: Delete Job
      operationId: DeleteJob
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
  /auth/logout:
    post:
      tags:
        - Jobs
      summary: logout
      operationId: logout
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
components:
  schemas:
    RegisterUserRequest:
      title: RegisterUserRequest
      required:
        - name
        - email
        - password
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
      example:
        name: Aly
        email: slyconr@gmail.com
        password: Pancra4239@
    loginrequest:
      title: loginrequest
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: caro@gmail.com
        password: Pancra4239@
    CreateJobRequest:
      title: CreateJobRequest
      required:
        - company
        - position
      type: object
      properties:
        company:
          type: string
        position:
          type: string
      example:
        company: Redhat
        position: Redhat Engineer
    UpdateJobRequest:
      title: UpdateJobRequest
      required:
        - company
        - position
      type: object
      properties:
        company:
          type: string
        position:
          type: string
      example:
        company: DEEZER
        position: bACKEND RELOADED
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
security: []
tags:
  - name: Misc
    description: ''
  - name: Auth
    description: ''
  - name: Jobs
    description: ''
